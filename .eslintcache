[{"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\index.js":"1","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\store.js":"2","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\components\\App.js":"3","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\index.js":"4","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\Home.js":"5","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\Detail.js":"6","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\components\\ToDo.js":"7"},{"size":276,"mtime":1610917201827,"results":"8","hashOfConfig":"9"},{"size":1447,"mtime":1610917201832,"results":"10","hashOfConfig":"9"},{"size":324,"mtime":1610917201823,"results":"11","hashOfConfig":"9"},{"size":90,"mtime":1610917201831,"results":"12","hashOfConfig":"9"},{"size":1621,"mtime":1610917201830,"results":"13","hashOfConfig":"9"},{"size":707,"mtime":1610917201829,"results":"14","hashOfConfig":"9"},{"size":542,"mtime":1610917201826,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"alodre",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\index.js",[],["33","34"],"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\store.js",[],"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\components\\App.js",[],"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\index.js",[],"C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\Home.js",["35"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { actionCreators } from \"../store\";\r\nimport ToDo from \"../components/ToDo.js\";\r\n\r\nconst Home = ({ toDos, addToDo }) => {\r\n  // console.log(toDos);\r\n  console.log(addToDo);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const onChange = e => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    setText(\"\");\r\n    console.log(text);\r\n    addToDo(text);\r\n  };\r\n\r\n  // const saveLocalStorage = toDos => {\r\n  //   localStorage.setItem(\"currentState\", JSON.stringify(toDos));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   saveLocalStorage(toDos);\r\n  // }, [text]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>To Do</h1>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter what ever you want\"\r\n          value={text}\r\n          onChange={onChange}\r\n        />\r\n        <button>Add</button>\r\n      </form>\r\n      <ul>\r\n        {toDos.map(toDo => (\r\n          <ToDo {...toDo} key={toDo.id} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 이 함수는 Home으로 보내주는 props에 추가될 수 있도록 허용해 준다 (store.getState() 와 같은 역할)\r\nconst mapStateToProps = state => {\r\n  return { toDos: state };\r\n};\r\n// dispatch는 함수이다 이것이 reducer에 값을 전달한다. (store.dispatch() 와 같은 역할)\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addToDo: text => dispatch(actionCreators.addToDo(text)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\routes\\Detail.js",["36"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Detail = ({ toDo }) => {\r\n  console.log(toDo);\r\n  // const id = useParams();   --> 이 방법이 리덕스를 쓰는 것 보다 간단함\r\n  // console.log(id);\r\n  return (\r\n    <>\r\n      <h1>{toDo?.text}</h1> {/*?를 쓰면 새로고침되어서 상태가 날라가지 않음*/}\r\n      <h4>Created at: {toDo?.id}</h4>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const {\r\n    match: {\r\n      params: { id },\r\n    },\r\n  } = ownProps;\r\n  return { toDo: state.find(toDo => toDo.id === parseInt(id)) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Detail);\r\n","C:\\Users\\837033\\Desktop\\Web\\projects\\Nomad-coder\\react-redux-toolkit\\src\\components\\ToDo.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":19},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation"]